"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[717],{7572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var i=t(5893),s=t(1151),a=t(4866),r=t(5162);const l={sidebar_position:2,title:"JSON API"},o=void 0,d={id:"elide/clientapis/jsonapi",title:"JSON API",description:"[//]: # (Copyright Paion Data)",source:"@site/docs/elide/clientapis/jsonapi.mdx",sourceDirName:"elide/clientapis",slug:"/elide/clientapis/jsonapi",permalink:"/zh-cn/docs/elide/clientapis/jsonapi",draft:!1,unlisted:!1,editUrl:"https://github.com/paion-data/astraios/tree/master/docs/docs/elide/clientapis/jsonapi.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"JSON API"},sidebar:"tutorialSidebar",previous:{title:"Client APIs",permalink:"/zh-cn/docs/elide/clientapis/"},next:{title:"GraphQL Queries & Mutations",permalink:"/zh-cn/docs/elide/clientapis/graphql"}},c={},h=[{value:"Hierarchical URLs",id:"hierarchical-urls",level:2},{value:"Model Identifiers",id:"model-identifiers",level:2},{value:"Matching Newly Created Objects to IDs",id:"matching-newly-created-objects-to-ids",level:3},{value:"Sparse Fields",id:"sparse-fields",level:2},{value:"Compound Documents",id:"compound-documents",level:2},{value:"Filtering",id:"filtering",level:2},{value:"RSQL",id:"rsql",level:3},{value:"Filter Syntax",id:"filter-syntax",level:4},{value:"Typed Filter Examples",id:"typed-filter-examples",level:4},{value:"Global Filter Examples",id:"global-filter-examples",level:4},{value:"Operators",id:"operators",level:4},{value:"FIQL Default Behaviour",id:"fiql-default-behaviour",level:5},{value:"Values &amp; Type Coercion",id:"values--type-coercion",level:4},{value:"Attribute arguments.",id:"attribute-arguments",level:4},{value:"Pagination",id:"pagination",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Meta Block",id:"meta-block",level:3},{value:"Example",id:"example",level:3},{value:"Sorting",id:"sorting",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Sort By ID",id:"sort-by-id",level:3},{value:"Example",id:"example-1",level:3},{value:"Bulk Writes And Complex Mutations",id:"bulk-writes-and-complex-mutations",level:2},{value:"Atomic Operations",id:"atomic-operations",level:3},{value:"JSON Patch",id:"json-patch",level:3},{value:"Links",id:"links",level:2},{value:"Meta Blocks",id:"meta-blocks",level:2},{value:"Customizing the Document Meta Block",id:"customizing-the-document-meta-block",level:3},{value:"Customizing the Resource Meta Block",id:"customizing-the-resource-meta-block",level:3},{value:"Type Serialization/Deserialization",id:"type-serializationdeserialization",level:2},{value:"OpenAPI",id:"openapi",level:2},{value:"Custom Error Responses",id:"custom-error-responses",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/",children:"JSON-API"})," is a specification for building REST APIs for CRUD (create, read,\nupdate, and delete) operations. Similar to GraphQL, it"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It allows the client to control what is returned in the response payload."}),"\n",(0,i.jsxs)(n.li,{children:["It provides a mechanism in the form of extensions (the\n",(0,i.jsx)(n.a,{href:"#bulk-writes-and-complex-mutations",children:(0,i.jsx)(n.em,{children:"Atomic Operations Extension and JSON Patch Extension"})}),") that allows multiple\nmutations to the graph to occur in a single request."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Unlike GraphQL, the JSON-API specification spells out exactly how to perform common CRUD operations including complex\ngraph mutations. JSON-API has no standardized schema introspection. However, Elide adds this capability to any service\nby exporting an ",(0,i.jsx)(n.a,{href:"https://www.openapis.org",children:"OpenAPI"})," document (formerly known as ",(0,i.jsx)(n.a,{href:"https://swagger.io",children:"Swagger"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/format/",children:"JSON-API specification"})," is the best reference for understanding\nJSON-API. The following sections describe commonly used JSON-API features as well as Elide additions for filtering,\npagination, sorting, and generation of OpenAPI documents."]}),"\n",(0,i.jsx)(n.h2,{id:"hierarchical-urls",children:"Hierarchical URLs"}),"\n",(0,i.jsxs)(n.p,{children:["Elide generally follows the ",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/recommendations/",children:"JSON-API recommendations"})," for URL\ndesign."]}),"\n",(0,i.jsx)(n.p,{children:"There are a few caveats given that Elide allows developers control over how entities are exposed:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Some entities may only be reached through a relationship to another entity. Not every entity is ",(0,i.jsx)(n.em,{children:"rootable"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"The root path segment of URLs are by default the name of the class (lowercase). This can be overridden."}),"\n",(0,i.jsx)(n.li,{children:"Elide allows relationships to be nested arbitrarily deep in URLs."}),"\n",(0,i.jsxs)(n.li,{children:["Elide currently requires all individual entities to be addressed by ID within a URL. For example, consider a model\nwith an article and a singular author which has a singular address. While unambiguous, the following is ",(0,i.jsx)(n.em,{children:"not"}),"\nallowed: ",(0,i.jsx)(n.code,{children:"/articles/1/author/address"}),". Instead, the author must be fully qualified by ID:\n",(0,i.jsx)(n.code,{children:"/articles/1/author/34/address"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"model-identifiers",children:"Model Identifiers"}),"\n",(0,i.jsx)(n.p,{children:"Elide supports three mechanisms by which a newly created entity is assigned an ID:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The ID is assigned by the client and saved in the data store."}),"\n",(0,i.jsx)(n.li,{children:"The client doesn't provide an ID and the data store generates one."}),"\n",(0,i.jsx)(n.li,{children:"The client provides an ID which is replaced by one generated by the data store.  When using the Atomic Operations\nExtension or JSON Patch Extension, the client must provide an ID or Local ID to identify objects which are both\ncreated and added to collections in other objects. However, in some instances the server should have ultimate control\nover the ID that is assigned."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Elide looks for the JPA ",(0,i.jsx)(n.code,{children:"GeneratedValue"})," annotation to disambiguate whether or not the data store generates an ID for a\ngiven data model. If the client also generated an ID during the object creation request, the data store ID overrides the\nclient value."]}),"\n",(0,i.jsx)(n.h3,{id:"matching-newly-created-objects-to-ids",children:"Matching Newly Created Objects to IDs"}),"\n",(0,i.jsx)(n.p,{children:"When using the Atomic Operations Extension or JSON Patch Extension, Elide returns object entity bodies (containing newly\nassigned IDs) in the order in which they were created. The client can use this order to map the object created to its\nserver assigned ID."}),"\n",(0,i.jsx)(n.h2,{id:"sparse-fields",children:"Sparse Fields"}),"\n",(0,i.jsxs)(n.p,{children:["JSON-API allows the client to limit the attributes and relationships that should be included in the response payload\nfor any given entity. The ",(0,i.jsx)(n.em,{children:"fields"})," query parameter specifies the type (data model) and list of fields that should be\nincluded."]}),"\n",(0,i.jsx)(n.p,{children:"For example, to fetch the book collection but only include the book titles:"}),"\n",(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(r.Z,{value:"sparse-fields-request",label:"Request",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/book?fields[book]=title\n"})})}),(0,i.jsx)(r.Z,{value:"sparse-fields-response",label:"Response",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data":[\n        {\n            "attributes":{\n                "title":"The Old Man and the Sea"\n            },\n            "id":"1",\n            "type":"book"\n        },\n        {\n            "attributes":{\n                "title":"For Whom the Bell Tolls"\n            },\n            "id":"2",\n            "type":"book"\n        },\n        {\n            "attributes":{\n                "title":"Enders Game"\n            },\n            "id":"3",\n            "type":"book"\n        }\n    ]\n}\n'})})})]}),"\n",(0,i.jsxs)(n.p,{children:["More information about sparse fields can be found\n",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/format/#fetching-sparse-fieldsets",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"compound-documents",children:"Compound Documents"}),"\n",(0,i.jsxs)(n.p,{children:["JSON-API allows the client to fetch a primary collection of elements but also include their relationships or their\nrelationship's relationships (arbitrarily nested) through compound documents. The ",(0,i.jsx)(n.em,{children:"include"})," query parameter specifies\nwhat relationships should be expanded in the document."]}),"\n",(0,i.jsx)(n.p,{children:"The following example fetches the book collection but also includes all of the book authors.  Sparse fields are used\nto limit the book and author fields in the response:"}),"\n",(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(r.Z,{value:"jsonapi-include-request",label:"Request",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/book?include=authors&fields[book]=title,authors&fields[author]=name\n"})})}),(0,i.jsx)(r.Z,{value:"jsonapi-include-response",label:"Response",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data":[\n        {\n            "attributes":{\n                "title":"The Old Man and the Sea"\n            },\n            "id":"1",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"1",\n                            "type":"author"\n                        }\n                    ]\n                }\n            },\n            "type":"book"\n        },\n        {\n            "attributes":{\n                "title":"For Whom the Bell Tolls"\n            },\n            "id":"2",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"1",\n                            "type":"author"\n                        }\n                    ]\n                }\n            },\n            "type":"book"\n        },\n        {\n            "attributes":{\n                "title":"Enders Game"\n            },\n            "id":"3",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"2",\n                            "type":"author"\n                        }\n                    ]\n                }\n            },\n            "type":"book"\n        }\n    ],\n    "included":[\n        {\n            "attributes":{\n                "name":"Ernest Hemingway"\n            },\n            "id":"1",\n            "type":"author"\n        },\n        {\n            "attributes":{\n                "name":"Orson Scott Card"\n            },\n            "id":"2",\n            "type":"author"\n        }\n    ]\n}\n'})})})]}),"\n",(0,i.jsxs)(n.p,{children:["More information about compound documents can be found\n",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/format/#document-compound-documents",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,i.jsxs)(n.p,{children:["JSON-API is agnostic to filtering strategies. The only recommendation is that servers and clients ",(0,i.jsx)(n.em,{children:"should"})," prefix\nfiltering query parameters with the word 'filter'."]}),"\n",(0,i.jsxs)(n.p,{children:["Elide supports multiple filter dialects and the ability to add new ones to meet the needs of developers or to evolve\nthe platform should JSON-API standardize them. Elide's primary dialect is\n",(0,i.jsx)(n.a,{href:"https://github.com/jirutka/rsql-parser",children:"RSQL"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"rsql",children:"RSQL"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/jirutka/rsql-parser",children:"RSQL"})," is a query language that allows conjunction (and), disjunction (or), and\nparenthetic grouping of Boolean expressions. It is a superset of the\n",(0,i.jsx)(n.a,{href:"https://tools.ietf.org/html/draft-nottingham-atompub-fiql-00",children:"FIQL language"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Because RSQL is a superset of FIQL, FIQL queries should be properly parsed. RSQL primarily adds more friendly lexer\ntokens to FIQL for conjunction and disjunction: 'and' instead of ';' and 'or' instead of ','. RSQL also adds a richer\nset of operators. FIQL defines all String comparison operators to be case insensitive. Elide overrides this behavior\nmaking all operators case sensitive by default. For case insensitive queries, Elide introduces new operators."}),"\n",(0,i.jsx)(n.h4,{id:"filter-syntax",children:"Filter Syntax"}),"\n",(0,i.jsx)(n.p,{children:"Filter query parameters either look like:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filter[TYPE]"})," where 'TYPE' is the name of the data model/entity. These are type specific filters and only apply to\nfiltering collections of the given type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filter"})," with no type specified. This is a global filter and can be used to filter across relationships (by\nperforming joins in the persistence layer)."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Any number of typed filter parameters can be specified provided the 'TYPE' is different for each parameter. There can\nonly be a single global filter for the entire query. Typed filters can be used for any collection returned by Elide.\nGlobal filters can only be used to filter root level collections."}),"\n",(0,i.jsx)(n.p,{children:"The value of any query parameter is a RSQL expression composed of predicates. Each predicate contains an attribute of\nthe data model or a related data model, an operator, and zero or more comparison values."}),"\n",(0,i.jsx)(n.p,{children:"Filter attributes can be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In the data model itself"}),"\n",(0,i.jsx)(n.li,{children:"In another related model traversed through to-one or to-many relationships"}),"\n",(0,i.jsx)(n.li,{children:"Inside an object or nested object hierarchy"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To join across relationships or drill into nested objects, the attribute name is prefixed by one or more relationship or\nfield names separated by period ('.'). For example, 'author.books.price.total' references all of the author's books with\na price having a particular total value."}),"\n",(0,i.jsx)(n.h4,{id:"typed-filter-examples",children:"Typed Filter Examples"}),"\n",(0,i.jsx)(n.p,{children:"Return all the books written by author '1' with the genre exactly equal to 'Science Fiction':"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/author/1/book?filter[book]=genre=='Science Fiction'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Return all the books written by author '1' with the genre exactly equal to 'Science Fiction' ",(0,i.jsx)(n.em,{children:"and"})," the title starts with\n'The' ",(0,i.jsx)(n.em,{children:"and"})," whose total price is greater than 100.00:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/author/1/book?filter[book]=genre=='Science Fiction';title==The*;price.total>100.00\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Return all the books written by author '1' with the publication date greater than a certain time ",(0,i.jsx)(n.em,{children:"or"})," the genre ",(0,i.jsx)(n.em,{children:"not"}),"\nbeing 'Literary Fiction' or 'Science Fiction':"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/author/1/book?filter[book]=publishDate>1454638927411,genre=out=('Literary Fiction','Science Fiction')\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return all the books whose title contains 'Foo'. Include all the authors of those books whose name does not equal\n'Orson Scott Card':"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/book?include=authors&filter[book]=title==*Foo*&filter[author]=name!='Orson Scott Card'\n"})}),"\n",(0,i.jsx)(n.h4,{id:"global-filter-examples",children:"Global Filter Examples"}),"\n",(0,i.jsx)(n.p,{children:"Return all the books with an author whose name is 'Null Ned' and whose title is 'Life with Null Ned':"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/book?filter=authors.name=='Null Ned';title=='Life with Null Ned'\n"})}),"\n",(0,i.jsx)(n.h4,{id:"operators",children:"Operators"}),"\n",(0,i.jsx)(n.p,{children:"The following RSQL operators are supported:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operator"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=in="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute exactly matches any of the values in the list. (Case Sensitive)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=ini="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute exactly matches any of the values in the list. (Case Insensitive)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=out="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute does not match any of the values in the list. (Case Sensitive)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=outi="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute does not match any of the values in the list. (Case Insensitive)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"==ABC*"})}),(0,i.jsxs)(n.td,{children:["Similar to SQL ",(0,i.jsx)(n.code,{children:"like 'ABC%'"}),". (Case Sensitive)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"==*ABC"})}),(0,i.jsxs)(n.td,{children:["Similar to SQL ",(0,i.jsx)(n.code,{children:"like '%ABC'"}),". (Case Sensitive)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"==*ABC*"})}),(0,i.jsxs)(n.td,{children:["Similar to SQL ",(0,i.jsx)(n.code,{children:"like '%ABC%'"}),". (Case Sensitive)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=ini=ABC*"})}),(0,i.jsxs)(n.td,{children:["Similar to SQL ",(0,i.jsx)(n.code,{children:"like 'ABC%'"}),". (Case Insensitive)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=ini=*ABC"})}),(0,i.jsxs)(n.td,{children:["Similar to SQL ",(0,i.jsx)(n.code,{children:"like '%ABC'"}),". (Case Insensitive)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=ini=*ABC*"})}),(0,i.jsxs)(n.td,{children:["Similar to SQL ",(0,i.jsx)(n.code,{children:"like '%ABC%'"}),". (Case Insensitive)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=isnull=true"})}),(0,i.jsxs)(n.td,{children:["Evaluates to true if the attribute is ",(0,i.jsx)(n.code,{children:"null"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=isnull=false"})}),(0,i.jsxs)(n.td,{children:["Evaluates to true if the attribute is not ",(0,i.jsx)(n.code,{children:"null"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=lt="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute is less than the value."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=gt="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute is greater than the value."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=le="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute is less than or equal to the value."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=ge="})}),(0,i.jsx)(n.td,{children:"Evaluates to true if the attribute is greater than or equal to the value."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=isempty="})}),(0,i.jsx)(n.td,{children:"Determines if a collection is empty or not."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=between="})}),(0,i.jsxs)(n.td,{children:["Determines if a model attribute is ",(0,i.jsx)(n.code,{children:">="})," and ",(0,i.jsx)(n.code,{children:"<="})," the two provided arguments."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=notbetween="})}),(0,i.jsx)(n.td,{children:"Negates the between operator."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=hasmember="})}),(0,i.jsxs)(n.td,{children:["Determines if a collection contains a particular element. This can be used to evaluate that an attribute across a to-many association has a ",(0,i.jsx)(n.code,{children:"null"})," value present by using ",(0,i.jsx)(n.code,{children:"=hasmember=null"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=hasnomember="})}),(0,i.jsx)(n.td,{children:"Determines if a collection does not contain a particular element."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=subsetof="})}),(0,i.jsx)(n.td,{children:"Determines if a collection is a subset of the values in the list. Meaning all the elements of the collection are in the provided values. Note that an empty set is a subset of every set."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=notsubsetof="})}),(0,i.jsx)(n.td,{children:"Determines if a collection is not a subset of the values in the list."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=supersetof="})}),(0,i.jsx)(n.td,{children:"Determines if a collection is a superset of the values in the list. Meaning all the elements in the provided values are in the collection."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"=notsupersetof="})}),(0,i.jsx)(n.td,{children:"Determines if a collection is not a superset of the values in the list."})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["The operators ",(0,i.jsx)(n.code,{children:"hasmember"}),", ",(0,i.jsx)(n.code,{children:"hasnomember"}),", ",(0,i.jsx)(n.code,{children:"subsetof"}),", ",(0,i.jsx)(n.code,{children:"notsubsetof"}),", ",(0,i.jsx)(n.code,{children:"supersetof"}),", ",(0,i.jsx)(n.code,{children:"notsupersetof"})," can be applied to collections (book.awards) or across to-many relationships (book.authors.name)."]}),"\n",(0,i.jsx)(n.h5,{id:"fiql-default-behaviour",children:"FIQL Default Behaviour"}),"\n",(0,i.jsxs)(n.p,{children:["By default, the FIQL operators ",(0,i.jsx)(n.code,{children:"=in="}),", ",(0,i.jsx)(n.code,{children:"=out="}),", ",(0,i.jsx)(n.code,{children:"=="})," are case sensitive. This can be reverted to case insensitive by\nchanging the case sensitive strategy."]}),"\n",(0,i.jsx)(n.h4,{id:"values--type-coercion",children:"Values & Type Coercion"}),"\n",(0,i.jsx)(n.p,{children:"Values are specified as URL encoded strings. Elide will type coerce them into the appropriate primitive data type for\nthe attribute filter."}),"\n",(0,i.jsx)(n.h4,{id:"attribute-arguments",children:"Attribute arguments."}),"\n",(0,i.jsx)(n.p,{children:"Some data stores like the Aggregation Store support parameterized model attributes. Parameters can be included in a\nfilter predicate with the following syntax:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"field[arg1:value1][arg2:value2]"})}),"\n",(0,i.jsx)(n.p,{children:"Argument values must be URL encoded. There is no limit to the number of arguments provided in this manner."}),"\n",(0,i.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,i.jsx)(n.p,{children:"Elide supports:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"paginating a collection by row offset and limit."}),"\n",(0,i.jsx)(n.li,{children:"paginating a collection by page size and number of pages."}),"\n",(0,i.jsx)(n.li,{children:"returning the total size of a collection visible to the given user."}),"\n",(0,i.jsxs)(n.li,{children:["returning a ",(0,i.jsx)(n.em,{children:"meta"})," block in the JSON-API response body containing metadata about the collection or individual\nresources."]}),"\n",(0,i.jsx)(n.li,{children:"A simple way to control:"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the availability of metadata"}),"\n",(0,i.jsx)(n.li,{children:"the number of records that can be paginated"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["Elide allows pagination of the primary collection being returned in the response via the ",(0,i.jsx)(n.em,{children:"page"})," query parameter."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"rough"})," BNF syntax for the ",(0,i.jsx)(n.em,{children:"page"})," query parameter is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'<QUERY> ::=\n     "page" "[" "size" "]" "=" <INTEGER>\n   | "page" "[" "number" "]" "=" <INTEGER>\n   | "page" "[" "limit" "]" "=" <INTEGER>\n   | "page" "[" "offset" "]" "=" <INTEGER>\n   | "page" "[" "totals" "]"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Legal combinations of the ",(0,i.jsx)(n.em,{children:"page"})," query params include:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"size"}),"\n",(0,i.jsx)(n.li,{children:"number"}),"\n",(0,i.jsx)(n.li,{children:"size & number"}),"\n",(0,i.jsx)(n.li,{children:"size & number & totals"}),"\n",(0,i.jsx)(n.li,{children:"offset"}),"\n",(0,i.jsx)(n.li,{children:"limit"}),"\n",(0,i.jsx)(n.li,{children:"offset & limit"}),"\n",(0,i.jsx)(n.li,{children:"offset & limit & totals"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"meta-block",children:"Meta Block"}),"\n",(0,i.jsxs)(n.p,{children:["Whenever a ",(0,i.jsx)(n.em,{children:"page"})," query parameter is specified, Elide will return a ",(0,i.jsx)(n.em,{children:"meta"})," block in the JSON-API response that contains:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The page ",(0,i.jsx)(n.em,{children:"number"})]}),"\n",(0,i.jsxs)(n.li,{children:["The page size or ",(0,i.jsx)(n.em,{children:"limit"})]}),"\n",(0,i.jsxs)(n.li,{children:["The total number of pages (",(0,i.jsx)(n.em,{children:"totalPages"}),") in the collection"]}),"\n",(0,i.jsxs)(n.li,{children:["The total number of records (",(0,i.jsx)(n.em,{children:"totalRecords"}),") in the collection."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The values for ",(0,i.jsx)(n.em,{children:"totalPages"})," and ",(0,i.jsx)(n.em,{children:"totalRecords"})," are only returned if the ",(0,i.jsx)(n.em,{children:"page[totals]"})," parameter was specified in the\nquery."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Paginate the book collection starting at the 4th record. Include no more than 2 books per page.\nInclude the total size of the collection in the ",(0,i.jsx)(n.em,{children:"meta block"}),":"]}),"\n",(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(r.Z,{value:"jsonapi-pagination-request",label:"Request",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/book?page[offset]=3&page[limit]=2&page[totals]\n"})})}),(0,i.jsx)(r.Z,{value:"jsonapi-pagination-response",label:"Response",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data":[\n        {\n            "attributes":{\n                "chapterCount":0,\n                "editorName":null,\n                "genre":"Science Fiction",\n                "language":"English",\n                "publishDate":1464638927412,\n                "title":"Enders Shadow"\n            },\n            "id":"4",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"2",\n                            "type":"author"\n                        }\n                    ]\n                },\n                "chapters":{\n                    "data":[\n\n                    ]\n                },\n                "publisher":{\n                    "data":null\n                }\n            },\n            "type":"book"\n        },\n        {\n            "attributes":{\n                "chapterCount":0,\n                "editorName":null,\n                "genre":"Science Fiction",\n                "language":"English",\n                "publishDate":0,\n                "title":"Foundation"\n            },\n            "id":"5",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"3",\n                            "type":"author"\n                        }\n                    ]\n                },\n                "chapters":{\n                    "data":[\n\n                    ]\n                },\n                "publisher":{\n                    "data":null\n                }\n            },\n            "type":"book"\n        }\n    ],\n    "meta":{\n        "page":{\n            "limit":2,\n            "number":2,\n            "totalPages":4,\n            "totalRecords":8\n        }\n    }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h2,{id:"sorting",children:"Sorting"}),"\n",(0,i.jsx)(n.p,{children:"Elide supports:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"sorting a collection by any model attribute."}),"\n",(0,i.jsx)(n.li,{children:"sorting a collection by multiple attributes at the same time in either ascending or descending order."}),"\n",(0,i.jsx)(n.li,{children:"sorting a collection by an attribute of another model connected via one or more to-one relationships."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["Elide allows sorting of the primary collection being returned in the response via the ",(0,i.jsx)(n.em,{children:"sort"})," query parameter."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"rough"})," BNF syntax for the ",(0,i.jsx)(n.em,{children:"sort"})," query parameter is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'<QUERY> ::= "sort" "=" <LIST_OF_SORT_SPECS>\n\n<LIST_OF_SORT_SPECS> = <SORT_SPEC> | <SORT_SPEC> "," <LIST_OF_SORT_SPECS>\n\n<SORT_SPEC> ::= "+|-"? <PATH_TO_ATTRIBUTE>\n\n<PATH_TO_ATTRIBUTE> ::= <RELATIONSHIP> <PATH_TO_ATTRIBUTE> | <ATTRIBUTE>\n\n<RELATIONSHIP> ::= <TERM> "."\n\n<ATTRIBUTE> ::= <TERM>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"sort-by-id",children:"Sort By ID"}),"\n",(0,i.jsxs)(n.p,{children:["The keyword ",(0,i.jsx)(n.em,{children:"id"})," can be used to sort by whatever field a given entity uses as its identifier."]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Sort the collection of author 1's books in descending order by the book's publisher's name:"}),"\n",(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(r.Z,{value:"jsonapi-sorting-request",label:"Request",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"/author/1/books?sort=-publisher.name\n"})})}),(0,i.jsx)(r.Z,{value:"jsonapi-sorting-response",label:"Response",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data":[\n        {\n            "attributes":{\n                "chapterCount":0,\n                "editorName":null,\n                "genre":"Literary Fiction",\n                "language":"English",\n                "publishDate":0,\n                "title":"For Whom the Bell Tolls"\n            },\n            "id":"2",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"1",\n                            "type":"author"\n                        }\n                    ]\n                },\n                "chapters":{\n                    "data":[\n\n                    ]\n                },\n                "publisher":{\n                    "data":{\n                        "id":"2",\n                        "type":"publisher"\n                    }\n                }\n            },\n            "type":"book"\n        },\n        {\n            "attributes":{\n                "chapterCount":0,\n                "editorName":null,\n                "genre":"Literary Fiction",\n                "language":"English",\n                "publishDate":0,\n                "title":"The Old Man and the Sea"\n            },\n            "id":"1",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"1",\n                            "type":"author"\n                        }\n                    ]\n                },\n                "chapters":{\n                    "data":[\n\n                    ]\n                },\n                "publisher":{\n                    "data":{\n                        "id":"1",\n                        "type":"publisher"\n                    }\n                }\n            },\n            "type":"book"\n        }\n    ]\n}\n'})})})]}),"\n",(0,i.jsx)(n.h2,{id:"bulk-writes-and-complex-mutations",children:"Bulk Writes And Complex Mutations"}),"\n",(0,i.jsxs)(n.p,{children:["JSON-API supports a mechanism for ",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/extensions/",children:"extensions"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Elide supports the ",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/ext/atomic/",children:"Atomic Operations Extension"})," which allows multiple\nmutation operations (create, delete, update) to be bundled together in as single request. Elide also supports the older\ndeprecated\n",(0,i.jsx)(n.a,{href:"https://github.com/json-api/json-api/blob/9c7a03dbc37f80f6ca81b16d444c960e96dd7a57/extensions/jsonpatch/index.md",children:"JSON Patch Extension"}),"\nwhich offers similar functionality."]}),"\n",(0,i.jsx)(n.p,{children:"Elide supports these extensions because it allows complex & bulk edits to the data model in the context of a single\ntransaction."}),"\n",(0,i.jsxs)(n.p,{children:["The extensions require a different Media Type to be specified for the ",(0,i.jsx)(n.code,{children:"Content-Type"})," and ",(0,i.jsx)(n.code,{children:"Accept"})," headers when making\nthe request."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Extension"}),(0,i.jsx)(n.th,{children:"Media Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Atomic Operations"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'application/vnd.api+json;ext="https://jsonapi.org/ext/atomic"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"JSON Patch"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"application/vnd.api+json;ext=jsonpatch"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Elide's Atomic Operations and JSON Patch extension support requires that all resources have assigned IDs specified using\nthe ",(0,i.jsx)(n.code,{children:"id"})," member when fixing up relationships. For newly created objects, if the IDs are generated by the server, a\nclient generated Local ID can be specified using the ",(0,i.jsx)(n.code,{children:"lid"})," member. Client generated IDs should be a UUID as described in\n",(0,i.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc4122.html",children:"RFC 4122"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"atomic-operations",children:"Atomic Operations"}),"\n",(0,i.jsx)(n.p,{children:"The following Atomic Operations request creates an author (Ernest Hemingway), some of his books, and his book publisher\nin a single request:"}),"\n",(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(r.Z,{value:"jsonapi-atomic-operations-extension-request",label:"Request",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "atomic:operations":[\n        {\n            "op":"add",\n            "data":{\n                "lid":"12345678-1234-1234-1234-1234567890ab",\n                "type":"author",\n                "attributes":{\n                    "name":"Ernest Hemingway"\n                },\n                "relationships":{\n                    "books":{\n                        "data":[\n                            {\n                                "type":"book",\n                                "id":"12345678-1234-1234-1234-1234567890ac"\n                            },\n                            {\n                                "type":"book",\n                                "id":"12345678-1234-1234-1234-1234567890ad"\n                            }\n                        ]\n                    }\n                }\n            }\n        },\n        {\n            "op":"add",\n            "data":{\n                "lid":"12345678-1234-1234-1234-1234567890ac",\n                "type":"book",\n                "attributes":{\n                    "title":"The Old Man and the Sea",\n                    "genre":"Literary Fiction",\n                    "language":"English"\n                },\n                "relationships":{\n                    "publisher":{\n                        "data":{\n                            "type":"publisher",\n                            "id":"12345678-1234-1234-1234-1234567890ae"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            "op":"add",\n            "data":{\n                "lid":"12345678-1234-1234-1234-1234567890ad",\n                "type":"book",\n                "attributes":{\n                    "title":"For Whom the Bell Tolls",\n                    "genre":"Literary Fiction",\n                    "language":"English"\n                }\n            }\n        },\n        {\n            "op":"add",\n            "href":"/book/12345678-1234-1234-1234-1234567890ac/publisher",\n            "data":{\n                "lid":"12345678-1234-1234-1234-1234567890ae",\n                "type":"publisher",\n                "attributes":{\n                    "name":"Default publisher"\n                }\n            }\n        }\n    ]\n}\n'})})}),(0,i.jsx)(r.Z,{value:"jsonapi-atomic-operations-extension-response",label:"Response",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "atomic:results":[\n        {\n            "data":{\n                "attributes":{\n                    "name":"Ernest Hemingway"\n                },\n                "id":"1",\n                "relationships":{\n                    "books":{\n                        "data":[\n                            {\n                                "id":"1",\n                                "type":"book"\n                            },\n                            {\n                                "id":"2",\n                                "type":"book"\n                            }\n                        ]\n                    }\n                },\n                "type":"author"\n            }\n        },\n        {\n            "data":{\n                "attributes":{\n                    "chapterCount":0,\n                    "editorName":null,\n                    "genre":"Literary Fiction",\n                    "language":"English",\n                    "publishDate":0,\n                    "title":"The Old Man and the Sea"\n                },\n                "id":"1",\n                "relationships":{\n                    "authors":{\n                        "data":[\n                            {\n                                "id":"1",\n                                "type":"author"\n                            }\n                        ]\n                    },\n                    "chapters":{\n                        "data":[\n\n                        ]\n                    },\n                    "publisher":{\n                        "data":{\n                            "id":"1",\n                            "type":"publisher"\n                        }\n                    }\n                },\n                "type":"book"\n            }\n        },\n        {\n            "data":{\n                "attributes":{\n                    "chapterCount":0,\n                    "editorName":null,\n                    "genre":"Literary Fiction",\n                    "language":"English",\n                    "publishDate":0,\n                    "title":"For Whom the Bell Tolls"\n                },\n                "id":"2",\n                "relationships":{\n                    "authors":{\n                        "data":[\n                            {\n                                "id":"1",\n                                "type":"author"\n                            }\n                        ]\n                    },\n                    "chapters":{\n                        "data":[\n\n                        ]\n                    },\n                    "publisher":{\n                        "data":null\n                    }\n                },\n                "type":"book"\n            }\n        },\n        {\n            "data":{\n                "attributes":{\n                    "name":"Default publisher"\n                },\n                "id":"1",\n                "type":"publisher"\n            }\n        }\n    ]\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"json-patch",children:"JSON Patch"}),"\n",(0,i.jsx)(n.p,{children:"The following JSON Patch request creates an author (Ernest Hemingway), some of his books, and his book publisher in a\nsingle request:"}),"\n",(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(r.Z,{value:"jsonapi-patch-extension-request",label:"Request",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "op":"add",\n        "path":"/author",\n        "value":{\n            "id":"12345678-1234-1234-1234-1234567890ab",\n            "type":"author",\n            "attributes":{\n                "name":"Ernest Hemingway"\n            },\n            "relationships":{\n                "books":{\n                    "data":[\n                        {\n                            "type":"book",\n                            "id":"12345678-1234-1234-1234-1234567890ac"\n                        },\n                        {\n                            "type":"book",\n                            "id":"12345678-1234-1234-1234-1234567890ad"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    {\n        "op":"add",\n        "path":"/book",\n        "value":{\n            "type":"book",\n            "id":"12345678-1234-1234-1234-1234567890ac",\n            "attributes":{\n                "title":"The Old Man and the Sea",\n                "genre":"Literary Fiction",\n                "language":"English"\n            },\n            "relationships":{\n                "publisher":{\n                    "data":{\n                        "type":"publisher",\n                        "id":"12345678-1234-1234-1234-1234567890ae"\n                    }\n                }\n            }\n        }\n    },\n    {\n        "op":"add",\n        "path":"/book",\n        "value":{\n            "type":"book",\n            "id":"12345678-1234-1234-1234-1234567890ad",\n            "attributes":{\n                "title":"For Whom the Bell Tolls",\n                "genre":"Literary Fiction",\n                "language":"English"\n            }\n        }\n    },\n    {\n        "op":"add",\n        "path":"/book/12345678-1234-1234-1234-1234567890ac/publisher",\n        "value":{\n            "type":"publisher",\n            "id":"12345678-1234-1234-1234-1234567890ae",\n            "attributes":{\n                "name":"Default publisher"\n            }\n        }\n    }\n]\n'})})}),(0,i.jsx)(r.Z,{value:"jsonapi-patch-extension-response",label:"Response",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "data":{\n            "attributes":{\n                "name":"Ernest Hemingway"\n            },\n            "id":"1",\n            "relationships":{\n                "books":{\n                    "data":[\n                        {\n                            "id":"1",\n                            "type":"book"\n                        },\n                        {\n                            "id":"2",\n                            "type":"book"\n                        }\n                    ]\n                }\n            },\n            "type":"author"\n        }\n    },\n    {\n        "data":{\n            "attributes":{\n                "chapterCount":0,\n                "editorName":null,\n                "genre":"Literary Fiction",\n                "language":"English",\n                "publishDate":0,\n                "title":"The Old Man and the Sea"\n            },\n            "id":"1",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"1",\n                            "type":"author"\n                        }\n                    ]\n                },\n                "chapters":{\n                    "data":[\n\n                    ]\n                },\n                "publisher":{\n                    "data":{\n                        "id":"1",\n                        "type":"publisher"\n                    }\n                }\n            },\n            "type":"book"\n        }\n    },\n    {\n        "data":{\n            "attributes":{\n                "chapterCount":0,\n                "editorName":null,\n                "genre":"Literary Fiction",\n                "language":"English",\n                "publishDate":0,\n                "title":"For Whom the Bell Tolls"\n            },\n            "id":"2",\n            "relationships":{\n                "authors":{\n                    "data":[\n                        {\n                            "id":"1",\n                            "type":"author"\n                        }\n                    ]\n                },\n                "chapters":{\n                    "data":[\n\n                    ]\n                },\n                "publisher":{\n                    "data":null\n                }\n            },\n            "type":"book"\n        }\n    },\n    {\n        "data":{\n            "attributes":{\n                "name":"Default publisher"\n            },\n            "id":"1",\n            "type":"publisher"\n        }\n    }\n]\n'})})})]}),"\n",(0,i.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,i.jsx)(n.p,{children:"JSON-API links are disabled by default. We can, however, enable links by configure the bindings:"}),"\n",(0,i.jsx)(n.p,{children:"(TBA)"}),"\n",(0,i.jsx)(n.p,{children:"Enabling JSON-API links will result in payload responses that look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data": [\n        {\n            "type": "group",\n            "id": "com.example.repository",\n            "attributes": {\n                "commonName": "Example Repository",\n                "description": "The code for this project"\n            },\n            "relationships": {\n                "products": {\n                    "links": {\n                        "self": "https://elide.io/api/v1/group/com.example.repository/relationships/products",\n                        "related": "https://elide.io/api/v1/group/com.example.repository/products"\n                    },\n                    "data": [\n\n                    ]\n                }\n            },\n            "links": {\n                "self": "https://elide.io/api/v1/group/com.example.repository"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"meta-blocks",children:"Meta Blocks"}),"\n",(0,i.jsxs)(n.p,{children:["JSON-API supports returning non-standard information in responses inside a\n",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/json-api/format/#document-meta",children:"meta block"}),". Elide supports meta blocks in three scenarios:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Document meta blocks are returned for any ",(0,i.jsx)(n.a,{href:"#pagination",children:"pagination"})," request."]}),"\n",(0,i.jsx)(n.li,{children:"The developer can customize the Document meta block for any collection query."}),"\n",(0,i.jsx)(n.li,{children:"The developer can customize a Resource meta block for any resource returned by Elide."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"customizing-the-document-meta-block",children:"Customizing the Document Meta Block"}),"\n",(0,i.jsxs)(n.p,{children:["To customize the document meta block, add fields to the ",(0,i.jsx)(n.code,{children:"RequestScope"})," object inside a\n",(0,i.jsx)(n.a,{href:"datastores#custom-stores",children:"custom data store"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Override\npublic <T> DataStoreIterable<T> loadObjects(EntityProjection projection, RequestScope scope){\n    //Populates the JSON-API meta block with a new field, 'key':\n    scope.setMetadataField(\"key\", 123);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This would produce a JSON response like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data": [\n        {\n            "type": "widget",\n            "id": "1"\n        }\n    ],\n    "meta": {\n        "key": 123\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"customizing-the-resource-meta-block",children:"Customizing the Resource Meta Block"}),"\n",(0,i.jsxs)(n.p,{children:["To customize the resource meta block, the resource model class must implement the ",(0,i.jsx)(n.code,{children:"WithMetadata"})," interface:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public interface WithMetadata {\n\n    /**\n     * Sets a metadata property for this request.\n     * @param property\n     * @param value\n     */\n    default void setMetadataField(String property, Object value) { //NOOP }\n\n    /**\n     * Retrieves a metadata property from this request.\n     * @param property\n     * @return An optional metadata property.\n     */\n    Optional<Object> getMetadataField(String property);\n\n    /**\n     * Return the set of metadata fields that have been set.\n     * @return metadata fields that have been set.\n     */\n    Set<String> getMetadataFields();\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For example, the following example model implements ",(0,i.jsx)(n.code,{children:"WithMetadata"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Include\npublic class Widget implements WithMetadata {\n    static Map metadata = Map.of("key", 123);\n\n    @Id\n    private String id;\n\n    @Override\n    public Optional<Object> getMetadataField(String property) {\n        return Optional.ofNullable(Widget.metadata.get(property));\n    }\n\n    @Override\n    public Set<String> getMetadataFields() {\n        return Widget.metadata.keySet();\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The models must be populated with at least one field for the meta block to be returned in the response. These fields can\nalso be populated in a ",(0,i.jsx)(n.a,{href:"datastores#custom-stores",children:"custom data store"})," or ",(0,i.jsx)(n.a,{href:"data-model#lifecycle-hooks",children:"lifecycle hook"}),".\nThis would produce a JSON response like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data": [\n        {\n            "type": "widget",\n            "id": "1",\n            "meta": {\n                "key": 123\n            }\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"type-serializationdeserialization",children:"Type Serialization/Deserialization"}),"\n",(0,i.jsxs)(n.p,{children:["Type coercion between the API and underlying data model has common support across JSON-API & GraphQL, and is covered\n",(0,i.jsx)(n.a,{href:"clientapis#type-coercion",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"openapi",children:"OpenAPI"}),"\n",(0,i.jsxs)(n.p,{children:["OpenAPI documents can be highly customized. The steps to customize this are documented ",(0,i.jsx)(n.a,{href:"openapi",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"custom-error-responses",children:"Custom Error Responses"}),"\n",(0,i.jsxs)(n.p,{children:["Configuring custom error responses is documented ",(0,i.jsx)(n.a,{href:"clientapis#custom-error-responses",children:"here"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>r});t(7294);var i=t(6010);const s={tabItem:"tabItem_Ymn6"};var a=t(5893);function r(e){let{children:n,hidden:t,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.Z)(s.tabItem,r),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>k});var i=t(7294),s=t(6010),a=t(2466),r=t(6550),l=t(469),o=t(1980),d=t(7392),c=t(12);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:s}}=e;return{value:n,label:t,attributes:i,default:s}}))}(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const s=(0,r.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=u(e),[r,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[d,h]=x({queryString:t,groupId:s}),[m,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,c.Nk)(t);return[s,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),b=(()=>{const e=d??m;return p({value:e,tabValues:a})?e:null})();(0,l.Z)((()=>{b&&o(b)}),[b]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),j(e)}),[h,j,a]),tabValues:a}}var j=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(5893);function f(e){let{className:n,block:t,selectedValue:i,selectValue:r,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.o5)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),s=l[t].value;s!==i&&(d(n),r(s))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>o.push(e),onKeyDown:h,onClick:c,...a,className:(0,s.Z)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=m(e);return(0,g.jsxs)("div",{className:(0,s.Z)("tabs-container",b.tabList),children:[(0,g.jsx)(f,{...e,...n}),(0,g.jsx)(y,{...e,...n})]})}function k(e){const n=(0,j.Z)();return(0,g.jsx)(v,{...e,children:h(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>r});var i=t(7294);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);