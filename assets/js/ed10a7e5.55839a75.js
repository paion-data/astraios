"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[223],{8591:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"java-env-properties","metadata":{"permalink":"/astraios/blog/java-env-properties","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-08-07-java-env-properties.md","source":"@site/blog/2019-08-07-java-env-properties.md","title":"Java System Properties & Environment Variables API\'s","description":"System Properties","date":"2019-08-07T00:00:00.000Z","formattedDate":"August 7, 2019","tags":[{"label":"java","permalink":"/astraios/blog/tags/java"}],"readingTime":1.62,"hasTruncateMarker":false,"authors":[{"name":"Jack","title":"Maintainer of Astraios","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"java-env-properties","title":"Java System Properties & Environment Variables API\'s","authors":"jiaqi","tags":["java"]}},"content":"System Properties\\n-----------------\\n\\nThe Java platform uses a **Properties** object to provide information about the local system and configuration, and we\\ncall it **System Properties**.\\n\\nSystem Properties include information such as the current user, the current version of the Java runtime, and the file\\npath-name separator.\\n\\nIn the below code, we use `System.getProperty(\\"log_dir\\")` to read the value of the property `log_dir`. We also make use\\nof the default value parameter, so if the property doesn\'t exist, getProperty returns `/tmp/log`:\\n\\n```java\\nString log_dir = System.getProperty(\\"log_dir\\",\\"/tmp/log\\");\\n```\\n\\nTo update System Properties at runtime, we use the **System.setProperty** method:\\n\\n```java\\nSystem.setProperty(\\"log_dir\\", \\"/tmp/log\\");\\n```\\n\\nWe can pass our own properties or configurations values to the application using the **propertyName** command line\\nargument:\\n\\n```java\\njava -jar jarName -DpropertyName=value\\n```\\n\\nFor example\\n\\n```java\\njava -jar app -Dfoo=\\"bar\\"\\n```\\n\\nEnvironment Variables\\n---------------------\\n\\nEnvironment Variables are key/value pairs like Properties. Many Operating Systems use Environment Variables to allow\\n_configuration information to be passed into applications_.\\n\\nThe way to set an environment variable differs from one operating system to another. For example, on Linux, we use\\n\\n```bash\\nexport MY_ENV_VAR=foo\\n```\\n\\n_When creating a process, it inherits a clone environment of its parent process by default_.\\n\\nTo obtain a single environment variable programmatically, we can call **getenv** with the variable name:\\n\\n```java\\nString log_dir = System.getenv(\\"log_dir\\");\\n```\\n\\n:::caution\\n\\ngetenv() returns a _read-only_ Map. Trying to add values to the map throws an UnsupportedOperationException.\\n\\n:::\\n\\nThe Differences\\n---------------\\n\\nAlthough both are essentially maps that provide String values for String keys, let\'s look at a few differences:\\n\\n1. We can update Properties at runtime, while Environment Variables are an immutable copy of the Operating System\'s\\n   variables.\\n2. Properties are contained only within the Java platform, while Environment Variables are global at the Operating\\n   System level, available to all applications running on the same machine.\\n3. Properties must exist when packaging the application, but we can create Environment Variables on the Operating\\n   System at almost any point."}]}')}}]);