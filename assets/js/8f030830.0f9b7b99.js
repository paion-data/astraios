"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3,title:"Development"},i=void 0,s={unversionedId:"development",id:"development",title:"Development",description:"Running Tests",source:"@site/docs/development.md",sourceDirName:".",slug:"/development",permalink:"/astraios/docs/development",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/development.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Development"},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/astraios/docs/setup"},next:{title:"JPA through Elide Middleware",permalink:"/astraios/docs/elide"}},p={},l=[{value:"Running Tests",id:"running-tests",level:2},{value:"Packaging",id:"packaging",level:2},{value:"Running Webservice in Docker Compose",id:"running-webservice-in-docker-compose",level:2},{value:"Step 1: Defining Data Models",id:"step-1-defining-data-models",level:3},{value:"Step 2: Spinning Up Docker Compose",id:"step-2-spinning-up-docker-compose",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3},{value:"Database Does Not Have My Model Packages&#39;s Bean Table",id:"database-does-not-have-my-model-packagess-bean-table",level:4},{value:"Entity Missing Default Constructor",id:"entity-missing-default-constructor",level:3},{value:"How to Exclude GraphQL Feature",id:"how-to-exclude-graphql-feature",level:3},{value:"Querying Webservice",id:"querying-webservice",level:2},{value:"GraphQL Queries through GraphiQL",id:"graphql-queries-through-graphiql",level:3},{value:"Install GraphiQL (on Mac)",id:"install-graphiql-on-mac",level:4},{value:"Quering GraphQL Endpoint",id:"quering-graphql-endpoint",level:4},{value:"TypeScript/JavaScript Axios",id:"typescriptjavascript-axios",level:3}],c={toc:l},d="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"running-tests"},"Running Tests"),(0,r.kt)("p",null,"The IT tests will run against an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/jersey-webservice-template-jpa-data-model/blob/master/src/main/java/com/qubitpi/ws/jersey/template/models/Book.java"},"example model")," so make sure the following environment variable is set to point to this\nmodel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export TEST_MODEL_PACKAGE_NAME=com.qubitpi.ws.jersey.template.models\n")),(0,r.kt)("p",null,"Next, download the model to ",(0,r.kt)("em",{parentName:"p"},"CLASSPATH")," by setting up the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.m2/settings.xml")," with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"\n          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd">\n\n    <profiles>\n        <profile>\n            <id>astraios-models</id>\n            <properties>\n                <model.package.jar.group.id>com.qubitpi</model.package.jar.group.id>\n                <model.package.jar.artifact.id>jersey-webservice-template-jpa-data-model</model.package.jar.artifact.id>\n                <model.package.jar.version>1.0.0</model.package.jar.version>\n            </properties>\n        </profile>\n    </profiles>\n\n    <activeProfiles>\n        <activeProfile>astraios-models</activeProfile>\n    </activeProfiles>\n</settings>\n')),(0,r.kt)("p",null,"Then execute the following commands to run both unit and integration tests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mvn clean verify\n")),(0,r.kt)("p",null,"For IT tests, we use ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/testcontainers-java/"},"Testcontainers")," instead of ",(0,r.kt)("a",{parentName:"p",href:"https://mysql.jcabi.com/"},"jcabi-mysql")," because the latter is hard to configure and debug and\n",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/testcontainers-java/"},"Testcontainers")," support more types of db, such as mongo"),(0,r.kt)("h2",{id:"packaging"},"Packaging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mvn clean package\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/WAR_(file_format)"},"WAR file")," named ",(0,r.kt)("strong",{parentName:"p"},"astraios-1.0-SNAPSHOT.war")," will\nbe generated under ",(0,r.kt)("em",{parentName:"p"},"target")," directory for ",(0,r.kt)("a",{parentName:"p",href:"#running-in-standalone-jetty"},"running in Jetty")),(0,r.kt)("h2",{id:"running-webservice-in-docker-compose"},"Running Webservice in Docker Compose"),(0,r.kt)("h3",{id:"step-1-defining-data-models"},"Step 1: Defining Data Models"),(0,r.kt)("p",null,"To inject ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/yahoo/elide/tree/master/elide-standalone#create-models"},"Elide model package"),", simply put\nthe models in a separate JAR and include it as a dependency in POM. If the model package is internal and cannot be\nvisible publicly, either make the astraios project private or public with model package dependency info\n",(0,r.kt)("a",{parentName:"p",href:"https://maven.apache.org/examples/injecting-properties-via-settings.html"},"injected via settings.xml"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<project>\n\n    ...\n\n    <dependencies>\n        <dependency>\n            <groupId>${model.package.jar.group.id}</groupId>\n            <artifactId>${model.package.jar.artifact.id}</artifactId>\n            <version>${model.package.jar.version}</version>\n        </dependency>\n    </dependencies>\n\n    ...\n\n    <repositories>\n        <repository>\n            <id>${astraios.model.package.repo.id}</id>\n            <name>Astraios model pacakge JAR repository</name>\n            <url>${astraios.model.package.repo.url}</url>\n        </repository>\n    </repositories>\n\n    ...\n\n</project>\n")),(0,r.kt)("p",null,"with a corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.m2/settings.xml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"\n          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd">\n\n    <profiles>\n        <profile>\n            <id>astraios-config-properties</id>\n            <properties>\n                <model.package.jar.group.id>com.mycompnay</model.package.jar.group.id>\n                <model.package.jar.artifact.id>my-model-package</model.package.jar.artifact.id>\n                <model.package.jar.version>1.0.7</model.package.jar.version>\n                <astraios.model.package.repo.id>mycompany-maven-repo-id</astraios.model.package.repo.id>\n                <astraios.model.package.repo.url>\n                    https://private.mvnrepository.com/artifact/com.company/my-model-package\n                </astraios.model.package.repo.url>\n            </properties>\n        </profile>\n    </profiles>\n\n\n    <activeProfiles>\n        <activeProfile>astraios-config-properties</activeProfile>\n    </activeProfiles>\n\n    <servers>\n        ...\n    </servers>\n</settings>\n')),(0,r.kt)("p",null,"Lastly, if IntelliJ IDE is used for developing Astraios, please make sure to let IDE pick up the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.m2/settings.xml")," by\nunchecking the ",(0,r.kt)("em",{parentName:"p"},"Use settings from .mvn/maven.config"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Error loading load-m2-settings.png",src:n(8200).Z,width:"3584",height:"2240"})),(0,r.kt)("h3",{id:"step-2-spinning-up-docker-compose"},"Step 2: Spinning Up Docker Compose"),(0,r.kt)("p",null,"Astraios can run in ","[Docker Compose]"," for the following purposes"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Decoupling frontend and backend developments"),(0,r.kt)("li",{parentName:"ol"},"Making it easy to run E2E testing of Astraios-backed application in CI/CD")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Docker Compose designed here is intended for local development and testing purposes ONLY! ",(0,r.kt)("em",{parentName:"p"},"It is strongly discouraged\nto run this Docker Compose in production!"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Error Loading docker-compose.png",src:n(3386).Z,width:"732",height:"492"})),(0,r.kt)("p",null,"Simply run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:paion-data/astraios.git\ncd astraios\nmvn clean package\nMODEL_PACKAGE_NAME=$ASTRAIOS_MODEL_PACKAGE_NAME docker compose up --build --force-recreate\n")),(0,r.kt)("p",null,"where the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"$ASTRAIOS_MODEL_PACKAGE_NAME")," variable is the package in config JAR that contains all\n",(0,r.kt)("a",{parentName:"p",href:"https://elide.io/pages/guide/v7/02-data-model.html"},"elide models"),". It can be set, for example, at command line with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export $TEST_MODEL_PACKAGE_NAME=com.mycompany.models\n")),(0,r.kt)("p",null,"The variable will be ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/58900415"},"passed")," into Docker Compose file."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The MySQL database, if running correctly, can be accessed from host machine via"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mysql -h localhost -P 3306 -D elide --protocol=tcp -u root -proot\n")),(0,r.kt)("p",{parentName:"admonition"},"Note all data is in ",(0,r.kt)("inlineCode",{parentName:"p"},"elide")," database which we have specified to use in the command above.")),(0,r.kt)("h3",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h4",{id:"database-does-not-have-my-model-packagess-bean-table"},"Database Does Not Have My Model Packages's Bean Table"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If tests is running in IntelliJ IDE"),", make sure the model package JAR it is in IDE's ",(0,r.kt)("strong",{parentName:"p"},"External Libraries")),(0,r.kt)("p",null,"Otherwise, the dependency injection didn't find a bean class under the package specified by\n",(0,r.kt)("a",{parentName:"p",href:"#step-1-defining-data-models"},"$TEST_MODEL_PACKAGE_NAME")),(0,r.kt)("h3",{id:"entity-missing-default-constructor"},"Entity Missing Default Constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[main] INFO  o.h.m.i.EntityInstantiatorPojoStandard - HHH000182: No default (no-argument) constructor for\nclass: ... (class must be instantiated by Interceptor)\n")),(0,r.kt)("p",null,"Simply add a no-args constructor to the bean class."),(0,r.kt)("h3",{id:"how-to-exclude-graphql-feature"},"How to Exclude GraphQL Feature"),(0,r.kt)("p",null,"To optionally disable GraphQL endpoints, exclude corresponding dependencies in POM. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>com.yahoo.elide</groupId>\n            <artifactId>elide-core</artifactId>\n            <version>7.0.0-pr6</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.yahoo.elide</groupId>\n                    <artifactId>elide-graphql</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n")),(0,r.kt)("h2",{id:"querying-webservice"},"Querying Webservice"),(0,r.kt)("h3",{id:"graphql-queries-through-graphiql"},"GraphQL Queries through GraphiQL"),(0,r.kt)("h4",{id:"install-graphiql-on-mac"},"Install GraphiQL (on Mac)"),(0,r.kt)("p",null,"via ",(0,r.kt)("a",{parentName:"p",href:"https://formulae.brew.sh/cask/graphiql"},"Homebrew")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brew install --cask graphiql\n")),(0,r.kt)("h4",{id:"quering-graphql-endpoint"},"Quering GraphQL Endpoint"),(0,r.kt)("p",null,"Let's crete a book:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  book(op: UPSERT, data:{title: "Pride & Prejudice"}) {\n    edges {\n      node {\n        id\n        title\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Error loading graphiql-mutation-example.png",src:n(9415).Z,width:"3584",height:"945"})),(0,r.kt)("p",null,"We can create few more books, sort and paginate them with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  book(sort: "-id", first: "1", after: "0") {\n    edges {\n      node {\n        id\n        title\n      }\n    }\n    pageInfo {\n      totalRecords\n      startCursor\n      endCursor\n      hasNextPage\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"typescriptjavascript-axios"},"TypeScript/JavaScript Axios"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Note that any serialization of TS/JS object (",(0,r.kt)("inlineCode",{parentName:"p"},"someObject"),") should be done with\n",(0,r.kt)("inlineCode",{parentName:"p"},"JSON.stringify(someObject).replace(/\"/g, '\\\\\"')"),", otherwise the GraphQL query won't be parsed properly by webservice.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import axios from "axios";\n\nconst JERSEY_WEBSERVICE_TEMPLATE_GRAPHQL_API_ENDPOINT = "https://myservice.com/v1/data";\n\nexport class Client {\n  public saveOrUpdate(book: Book, userId: string, accessToken: string): Promise<any> {\n    const someJsonField = JSON.stringify({ field1: book.field1, field2: book.field2 }).replace(/"/g, \'\\\\"\');\n\n    return this.postGraphQLQuery(\n      `\n      mutation saveGraph {\n        graph(op: UPSERT, data: {\n          id: "${book.id}"\n          title: "${book.title}"\n          authorId: "${book.authorId}"\n          jsonField: "${someJsonField}"\n        }) {\n          edges {\n            node {\n              id\n              title\n              author\n            }\n          }\n        }\n      }\n      `,\n      accessToken\n    );\n  }\n\n  public getBooksByAuthorId(authorId: string, accessToken: string) {\n    return this.postGraphQLQuery(\n      `\n      query getBooksByAuthorId {\n        book(filter:"authorId==${authorId}") {\n          edges {\n            node {\n              id\n              title\n            }\n          }\n        }\n      }\n      `,\n      accessToken\n    );\n  }\n\n  private postGraphQLQuery(query: string, accessToken: string): Promise<any> {\n    return axios\n      .post(JERSEY_WEBSERVICE_TEMPLATE_GRAPHQL_API_ENDPOINT, { query: query }, this.getHeaders(accessToken))\n      .then((response) => {\n        return response;\n      });\n  }\n\n  private getHeaders(token: string) {\n    return {\n      headers: {\n        Accept: "application/json",\n        "Content-Type": "application/json",\n        Authorization: "Bearer " + token,\n      },\n    };\n  }\n}\n')))}m.isMDXComponent=!0},3386:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/docker-compose-c901c60cce997d66d07b7b62b7678287.png"},9415:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graphiql-mutation-example-747c388455a51d3a6bb4f1aa9242f3b7.png"},8200:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/load-m2-settings-8c90138e53bba78c2a44ea1c6304f377.png"}}]);